// import React, { useState } from "react";
// import { Slider } from 'antd';
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";
// import { format } from "date-fns";
// import { useGetBrandsQuery } from "../../services/brandApi";
// import BrandListWithAlphabet from "../brand/BrandListWithAlphabet";

// export interface ProductFilterData {
//   Query?: string;
//   PriceMin?: number;
//   PriceMax?: number;
//   MinRating?: number;
//   InStock?: boolean;
//   SortBy?: string;
//   SortDesc?: boolean;

//   StartDate?: string; // "dd.MM.yyyy"
//   EndDate?: string;   // "dd.MM.yyyy"
// }

// type Props = {
//   onChange: (filters: ProductFilterData) => void;
// };

// const ProductFilter: React.FC<Props> = ({ onChange }) => {
//   const [query, setQuery] = useState("");
//   const [priceMin, setPriceMin] = useState("");
//   const [priceMax, setPriceMax] = useState("");
//   const [minRating, setMinRating] = useState("");
//   const [inStock, setInStock] = useState(false);
//   const [sortBy, setSortBy] = useState("");
//   const [sortDesc, setSortDesc] = useState(false);
//   const [selectedLetter, setSelectedLetter] = useState("");
//   const [selectedBrandId, setSelectedBrandId] = useState<number | null>(null);
//   const [startDate, setStartDate] = useState<Date | null>(null);
//   const [endDate, setEndDate] = useState<Date | null>(null);


//   const { data: brands = [], isLoading, isError, error } = useGetBrandsQuery();
//   console.log("–ü–æ–º–∏–ª–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤:", error);

//   const handleApply = () => {
//     onChange({
//       Query: query || undefined,
//       PriceMin: priceMin ? Number(priceMin) : undefined,
//       PriceMax: priceMax ? Number(priceMax) : undefined,
//       MinRating: minRating ? Number(minRating) : undefined,
//       InStock: inStock,
//       SortBy: sortBy || undefined,
//       SortDesc: sortDesc || undefined,
//       StartDate: startDate ? format(startDate, "dd.MM.yyyy") : undefined,
//       EndDate: endDate ? format(endDate, "dd.MM.yyyy") : undefined,
//     });
//   };

//   const handleReset = () => {
//     // setQuery("");
//     // setPriceMin("");
//     // setPriceMax("");
//     // setMinRating("");
//     // setInStock(false);
//     // setSortBy("");
//     // setSortDesc(false);
//     // onChange({});
//     // setSelectedLetter("");
//     // setStartDate(null);
//     // setEndDate(null);


//     setQuery("");
//     setPriceMin("");
//     setPriceMax("");
//     setMinRating("");
//     setInStock(false);
//     setSortBy("");
//     setSortDesc(false);
//     setSelectedLetter("");
//     setStartDate(null);
//     setEndDate(null);
//     setSelectedBrandId(null);

//     // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
//     onChange({});

//     // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
//     window.location.reload();
//   };

//   // const handleBrandSelect = (brand: { name: string }) => {
//   //   setQuery(brand.name);
//   //   onChange({
//   //     Query: brand.name,
//   //     PriceMin: priceMin ? Number(priceMin) : undefined,
//   //     PriceMax: priceMax ? Number(priceMax) : undefined,
//   //     MinRating: minRating ? Number(minRating) : undefined,
//   //     InStock: inStock,
//   //     SortBy: sortBy || undefined,
//   //     SortDesc: sortDesc || undefined,
//   //   });
//   // };

//   const handleBrandSelect = (brand: { name: string; id: number } | null) => {
//     if (brand === null) {
//       setSelectedBrandId(null);
//       setQuery("");
//       onChange({}); // —Å–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –±—Ä–µ–Ω–¥—É
//     } else {
//       setSelectedBrandId(brand.id);
//       setQuery(brand.name);
//       onChange({
//         Query: brand.name,
//         PriceMin: priceMin ? Number(priceMin) : undefined,
//         PriceMax: priceMax ? Number(priceMax) : undefined,
//         MinRating: minRating ? Number(minRating) : undefined,
//         InStock: inStock,
//         SortBy: sortBy || undefined,
//         SortDesc: sortDesc || undefined,
//       });
//     }
//   };


//   const minPriceFromApi = 100;
//   const maxPriceFromApi = 10000;

//   return (
//     <div className="w-full max-w-[1680px] flex flex-col gap-4 px-4 mb-4">
//       <div className="flex flex-col gap-4 w-full">

//         {/* üëâ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ –±—Ä–µ–Ω–¥–∞–º–∏ */}
//       <div className="border-t pt-4">
//         {isLoading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤...</p>}
//         {isError && <p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—ñ–≤.</p>}
//         {!isLoading && !isError && (
//   //          <BrandListWithAlphabet
//   //   brands={brands}
//   //   selectedLetter={selectedLetter}
//   //   onLetterSelect={setSelectedLetter}
//   //   onBrandSelect={handleBrandSelect}
//   // />

//             <BrandListWithAlphabet
//                 brands={brands}
//                 selectedLetter={selectedLetter}
//                 onLetterSelect={setSelectedLetter}
//                 onBrandSelect={handleBrandSelect}
//                 selectedBrandId={selectedBrandId}
//             />

//         )}
//       </div>

//         {/* –ü–æ—à—É–∫ */}
//         <input
//           type="text"
//           placeholder="–ü–æ—à—É–∫..."
//           value={query}
//           onChange={(e) => setQuery(e.target.value)}
//           className="border px-3 py-2 rounded w-full"
//         />

//         {/* –¶—ñ–Ω–∞ (—Å–ª–∞–π–¥–µ—Ä) */}
//         <div className="w-full">
//           <label className="block mb-2 font-medium">–¶—ñ–Ω–∞, –≥—Ä–Ω</label>
//           <Slider
//             range
//             min={minPriceFromApi}
//             max={maxPriceFromApi}
//             step={10}
//             value={[Number(priceMin) || minPriceFromApi, Number(priceMax) || maxPriceFromApi]}
//             onChange={([min, max]) => {
//               setPriceMin(String(min));
//               setPriceMax(String(max));
//             }}
//           />
//           <div className="flex justify-between text-sm text-gray-600 mt-1">
//             <span>{priceMin || minPriceFromApi} –≥—Ä–Ω</span>
//             <span>{priceMax || maxPriceFromApi} –≥—Ä–Ω</span>
//           </div>
//         </div>


//         <div className="flex flex-col gap-2">
//           <label className="font-medium">–î–∞—Ç–∞ –≤—ñ–¥</label>
//           <DatePicker
//               selected={startDate}
//               onChange={(date) => setStartDate(date)}
//               dateFormat="dd.MM.yyyy"
//               className="border px-3 py-2 rounded w-full"
//               placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥"
//               isClearable
//           />

//           <label className="font-medium mt-2">–î–∞—Ç–∞ –¥–æ</label>
//           <DatePicker
//               selected={endDate}
//               onChange={(date) => setEndDate(date)}
//               dateFormat="dd.MM.yyyy"
//               className="border px-3 py-2 rounded w-full"
//               placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ"
//               isClearable
//           />
//         </div>


//         {/* –ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥ */}
//         <input
//           type="number"
//           placeholder="–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥"
//           value={minRating}
//           onChange={(e) => setMinRating(e.target.value)}
//           className="border px-3 py-2 rounded w-full"
//           min={0}
//           max={5}
//           step={0.1}
//         />

//         {/* –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ */}
//         <label className="flex items-center gap-2">
//           <input
//             type="checkbox"
//             checked={inStock}
//             onChange={(e) => setInStock(e.target.checked)}
//           />
//           –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
//         </label>

//         {/* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
//         <select
//           value={sortBy}
//           onChange={(e) => setSortBy(e.target.value)}
//           className="border px-3 py-2 rounded w-full"
//         >
//           <option value="">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
//           <option value="Price">–¶—ñ–Ω–∞</option>
//           <option value="Rating">–†–µ–π—Ç–∏–Ω–≥</option>
//           <option value="CreatedAt">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</option>
//         </select>

//         {/* –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º */}
//         <label className="flex items-center gap-2">
//           <input
//             type="checkbox"
//             checked={sortDesc}
//             onChange={(e) => setSortDesc(e.target.checked)}
//           />
//           –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º
//         </label>

//       </div>
//       {/* –ö–Ω–æ–ø–∫–∏ */}
//       <div className="flex flex-col gap-2 w-full">
//         <button
//             onClick={handleApply}
//             className="bg-blue-500 text-white px-4 py-2 rounded w-full"
//         >
//           –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
//         </button>

//         <button
//             onClick={handleReset}
//             className="bg-red-500 text-white px-4 py-2 rounded w-full"
//         >
//           –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä
//         </button>
//       </div>

      
//     </div>
//   );
// };

// export default ProductFilter;



// import React, { useState } from "react";
// import { Slider } from "antd";
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";
// import { format } from "date-fns";
// import { useGetBrandsQuery } from "../../services/brandApi";
// import BrandListWithAlphabet from "../brand/BrandListWithAlphabet";

// export interface ProductFilterData {
//   Query?: string;
//   PriceMin?: number;
//   PriceMax?: number;
//   MinRating?: number;
//   InStock?: boolean;
//   SortBy?: string;
//   SortDesc?: boolean;

//   StartDate?: string; // "dd.MM.yyyy"
//   EndDate?: string;   // "dd.MM.yyyy"
// }

// type Props = {
//   onChange: (filters: ProductFilterData) => void;
//   isAdmin: boolean; // –æ—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–ø—Å, —â–æ–± —Ä–æ–∑—Ä—ñ–∑–Ω—è—Ç–∏ —Ä–æ–ª—å
// };

// const ProductFilter: React.FC<Props> = ({ onChange, isAdmin }) => {
//   // –°—Ç–∞–Ω–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
//   const [query, setQuery] = useState("");
//   const [priceMin, setPriceMin] = useState("");
//   const [priceMax, setPriceMax] = useState("");
//   const [minRating, setMinRating] = useState("");
//   const [inStock, setInStock] = useState(false);
//   const [sortBy, setSortBy] = useState("");
//   const [sortDesc, setSortDesc] = useState(false);
//   const [selectedLetter, setSelectedLetter] = useState("");
//   const [selectedBrandId, setSelectedBrandId] = useState<number | null>(null);
//   const [startDate, setStartDate] = useState<Date | null>(null);
//   const [endDate, setEndDate] = useState<Date | null>(null);

//   // –°—Ç–∞–Ω–∏ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è —ñ–Ω–ø—É—Ç—ñ–≤
//   const [showQuery, setShowQuery] = useState(false);
//   const [showMinRating, setShowMinRating] = useState(false);
//   const [showInStock, setShowInStock] = useState(false);
//   const [showSortBy, setShowSortBy] = useState(false);
//   const [showSortDesc, setShowSortDesc] = useState(false);
//   const [showDateFilter, setShowDateFilter] = useState(false); // –¥–ª—è –¥–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)

//   const { data: brands = [], isLoading, isError, error } = useGetBrandsQuery();
//   console.log("–ü–æ–º–∏–ª–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤:", error);

//   const handleApply = () => {
//     onChange({
//       Query: query || undefined,
//       PriceMin: priceMin ? Number(priceMin) : undefined,
//       PriceMax: priceMax ? Number(priceMax) : undefined,
//       MinRating: minRating ? Number(minRating) : undefined,
//       InStock: inStock,
//       SortBy: sortBy || undefined,
//       SortDesc: sortDesc || undefined,
//       StartDate: startDate ? format(startDate, "dd.MM.yyyy") : undefined,
//       EndDate: endDate ? format(endDate, "dd.MM.yyyy") : undefined,
//     });
//   };

//   const handleReset = () => {
//     setQuery("");
//     setPriceMin("");
//     setPriceMax("");
//     setMinRating("");
//     setInStock(false);
//     setSortBy("");
//     setSortDesc(false);
//     setSelectedLetter("");
//     setStartDate(null);
//     setEndDate(null);
//     setSelectedBrandId(null);

//     onChange({});

//     // –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –Ω—ñ
//     // window.location.reload();
//   };

//   const handleBrandSelect = (brand: { name: string; id: number } | null) => {
//     if (brand === null) {
//       setSelectedBrandId(null);
//       setQuery("");
//       onChange({});
//     } else {
//       setSelectedBrandId(brand.id);
//       setQuery(brand.name);
//       onChange({
//         Query: brand.name,
//         PriceMin: priceMin ? Number(priceMin) : undefined,
//         PriceMax: priceMax ? Number(priceMax) : undefined,
//         MinRating: minRating ? Number(minRating) : undefined,
//         InStock: inStock,
//         SortBy: sortBy || undefined,
//         SortDesc: sortDesc || undefined,
//       });
//     }
//   };

//   const minPriceFromApi = 100;
//   const maxPriceFromApi = 10000;

//   return (
//     <div className="w-full max-w-[1680px] flex flex-col gap-4 px-4 mb-4">
//       <div className="flex flex-col gap-4 w-full">

//         {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ –±—Ä–µ–Ω–¥–∞–º–∏ */}
//         <div className="pt-4">
//           {isLoading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤...</p>}
//           {isError && <p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—ñ–≤.</p>}
//           {!isLoading && !isError && (
//             <BrandListWithAlphabet
//               brands={brands}
//               selectedLetter={selectedLetter}
//               onLetterSelect={setSelectedLetter}
//               onBrandSelect={handleBrandSelect}
//               selectedBrandId={selectedBrandId}
//             />
//           )}
//         </div>

//         {/* –ü–æ—à—É–∫ - –Ω–∞–∑–≤–∞ + –∫–Ω–æ–ø–∫–∞ */}
//         <div className="w-full">
//           <div className="flex justify-between items-center">
//             <label className="font-medium">–ü–æ—à—É–∫</label>
//             <button
//               onClick={() => setShowQuery(!showQuery)}
//               className="text-gray-500 hover:text-black text-lg"
//             >
//               ‚úñ
//             </button>
//           </div>
//           {showQuery && (
//             <input
//               type="text"
//               placeholder="–ü–æ—à—É–∫..."
//               value={query}
//               onChange={(e) => setQuery(e.target.value)}
//               className="mt-2 px-3 py-2 rounded w-full border"
//             />
//           )}
//         </div>

//         {/* –¶—ñ–Ω–∞ (—Å–ª–∞–π–¥–µ—Ä) - –∑–∞–≤–∂–¥–∏ –≤–∏–¥–Ω–æ, –±–µ–∑ –∫–Ω–æ–ø–∫–∏ */}
//         <div className="w-full">
//           <label className="block mb-2 font-medium">–¶—ñ–Ω–∞, –≥—Ä–Ω</label>
//           <Slider
//             range
//             min={minPriceFromApi}
//             max={maxPriceFromApi}
//             step={10}
//             value={[Number(priceMin) || minPriceFromApi, Number(priceMax) || maxPriceFromApi]}
//             onChange={([min, max]) => {
//               setPriceMin(String(min));
//               setPriceMax(String(max));
//             }}
//           />
//           <div className="flex justify-between text-sm text-gray-600 mt-1">
//             <span>{priceMin || minPriceFromApi} –≥—Ä–Ω</span>
//             <span>{priceMax || maxPriceFromApi} –≥—Ä–Ω</span>
//           </div>
//         </div>

//         {/* –ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥ - –Ω–∞–∑–≤–∞ + –∫–Ω–æ–ø–∫–∞ */}
//         <div className="w-full">
//           <div className="flex justify-between items-center">
//             <label className="font-medium">–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥</label>
//             <button
//               onClick={() => setShowMinRating(!showMinRating)}
//               className="text-gray-500 hover:text-black text-lg"
//             >
//               ‚úñ
//             </button>
//           </div>
//           {showMinRating && (
//             <input
//               type="number"
//               placeholder="–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥"
//               value={minRating}
//               onChange={(e) => setMinRating(e.target.value)}
//               className="mt-2 px-3 py-2 rounded w-full border"
//               min={0}
//               max={5}
//               step={0.1}
//             />
//           )}
//         </div>

//         {/* –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ - –Ω–∞–∑–≤–∞ + –∫–Ω–æ–ø–∫–∞ */}
//         <div className="w-full">
//           <div className="flex justify-between items-center">
//             <label className="font-medium">–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</label>
//             <button
//               onClick={() => setShowInStock(!showInStock)}
//               className="text-gray-500 hover:text-black text-lg"
//             >
//               ‚úñ
//             </button>
//           </div>
//           {showInStock && (
//             <label className="flex items-center gap-2 mt-2">
//               <input
//                 type="checkbox"
//                 checked={inStock}
//                 onChange={(e) => setInStock(e.target.checked)}
//               />
//               –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
//             </label>
//           )}
//         </div>

//         {/* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è - –Ω–∞–∑–≤–∞ + –∫–Ω–æ–ø–∫–∞ */}
//         <div className="w-full">
//           <div className="flex justify-between items-center">
//             <label className="font-medium">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</label>
//             <button
//               onClick={() => setShowSortBy(!showSortBy)}
//               className="text-gray-500 hover:text-black text-lg"
//             >
//               ‚úñ
//             </button>
//           </div>
//           {showSortBy && (
//             <select
//               value={sortBy}
//               onChange={(e) => setSortBy(e.target.value)}
//               className="mt-2 px-3 py-2 rounded w-full border"
//             >
//               <option value="">–û–±–µ—Ä—ñ—Ç—å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
//               <option value="Price">–¶—ñ–Ω–∞</option>
//               <option value="Rating">–†–µ–π—Ç–∏–Ω–≥</option>
//               <option value="CreatedAt">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</option>
//             </select>
//           )}
//         </div>

//         {/* –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º - –Ω–∞–∑–≤–∞ + –∫–Ω–æ–ø–∫–∞ */}
//         <div className="w-full">
//           <div className="flex justify-between items-center">
//             <label className="font-medium">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</label>
//             <button
//               onClick={() => setShowSortDesc(!showSortDesc)}
//               className="text-gray-500 hover:text-black text-lg"
//             >
//               ‚úñ
//             </button>
//           </div>
//           {showSortDesc && (
//             <label className="flex items-center gap-2 mt-2">
//               <input
//                 type="checkbox"
//                 checked={sortDesc}
//                 onChange={(e) => setSortDesc(e.target.checked)}
//               />
//               –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º
//             </label>
//           )}
//         </div>

//         {/* –î–∞—Ç–∞ - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ */}
//         {isAdmin && (
//           <div className="w-full">
//             <div className="flex justify-between items-center">
//               <label className="font-medium">–î–∞—Ç–∞</label>
//               <button
//                 onClick={() => setShowDateFilter(!showDateFilter)}
//                 className="text-gray-500 hover:text-black text-lg"
//               >
//                 ‚úñ
//               </button>
//             </div>
//             {showDateFilter && (
//               <div className="flex flex-col gap-2 mt-2">
//                 <div>
//                   <label className="block">–î–∞—Ç–∞ –≤—ñ–¥</label>
//                   <DatePicker
//                     selected={startDate}
//                     onChange={(date) => setStartDate(date)}
//                     dateFormat="dd.MM.yyyy"
//                     className="border px-3 py-2 rounded w-full"
//                     placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥"
//                     isClearable
//                   />
//                 </div>
//                 <div>
//                   <label className="block">–î–∞—Ç–∞ –¥–æ</label>
//                   <DatePicker
//                     selected={endDate}
//                     onChange={(date) => setEndDate(date)}
//                     dateFormat="dd.MM.yyyy"
//                     className="border px-3 py-2 rounded w-full"
//                     placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ"
//                     isClearable
//                   />
//                 </div>
//               </div>
//             )}
//           </div>
//         )}
//       </div>

//       {/* –ö–Ω–æ–ø–∫–∏ */}
//       <div className="flex flex-col gap-2 w-full">
//         <button
//           onClick={handleApply}
//           className="bg-blue-500 text-white px-4 py-2 rounded w-full"
//         >
//           –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
//         </button>

//         <button
//           onClick={handleReset}
//           className="bg-red-500 text-white px-4 py-2 rounded w-full"
//         >
//           –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä
//         </button>
//       </div>
//     </div>
//   );
// };

// export default ProductFilter;


// import React, { useState, useEffect } from "react";
// import { Slider } from "antd";
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";
// import { format } from "date-fns";
// import { useGetBrandsQuery } from "../../services/brandApi";
// import BrandListWithAlphabet from "../brand/BrandListWithAlphabet";

// export interface ProductFilterData {
//   Query?: string;
//   PriceMin?: number;
//   PriceMax?: number;
//   MinRating?: number;
//   InStock?: boolean;
//   SortBy?: string;
//   SortDesc?: boolean;

//   StartDate?: string; // "dd.MM.yyyy"
//   EndDate?: string; // "dd.MM.yyyy"
// }

// type Props = {
//   onChange: (filters: ProductFilterData) => void;
//   isAdmin: boolean; // –¥–æ–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∞–¥–º—ñ–Ω–∞
// };

// const ProductFilter: React.FC<Props> = ({ onChange, isAdmin }) => {
//   const [query, setQuery] = useState("");
//   const [priceMin, setPriceMin] = useState("");
//   const [priceMax, setPriceMax] = useState("");
//   const [minRating, setMinRating] = useState("");
//   const [inStock, setInStock] = useState(false);
//   const [sortBy, setSortBy] = useState("");
//   const [sortDesc, setSortDesc] = useState(false);
//   const [selectedLetter, setSelectedLetter] = useState("");
//   const [selectedBrandId, setSelectedBrandId] = useState<number | null>(null);
//   const [startDate, setStartDate] = useState<Date | null>(null);
//   const [endDate, setEndDate] = useState<Date | null>(null);

//   // –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (–∫—Ä—ñ–º –ø–æ—à—É–∫—É —ñ —Ü—ñ–Ω–∏)
//   const [showMinRating, setShowMinRating] = useState(false);
//   const [showInStock, setShowInStock] = useState(false);
//   const [showSortBy, setShowSortBy] = useState(false);
//   const [showSortDesc, setShowSortDesc] = useState(false);
//   const [showStartDate, setShowStartDate] = useState(false);
//   const [showEndDate, setShowEndDate] = useState(false);

//   const { data: brands = [], isLoading, isError, error } = useGetBrandsQuery();

//   // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π –∑–º—ñ–Ω—ñ
//   useEffect(() => {
//     onChange({
//       Query: query || undefined,
//       PriceMin: priceMin ? Number(priceMin) : undefined,
//       PriceMax: priceMax ? Number(priceMax) : undefined,
//       MinRating: minRating ? Number(minRating) : undefined,
//       InStock: inStock,
//       SortBy: sortBy || undefined,
//       SortDesc: sortDesc || undefined,
//       StartDate: isAdmin && startDate ? format(startDate, "dd.MM.yyyy") : undefined,
//       EndDate: isAdmin && endDate ? format(endDate, "dd.MM.yyyy") : undefined,
//     });
//   }, [
//     query,
//     priceMin,
//     priceMax,
//     minRating,
//     inStock,
//     sortBy,
//     sortDesc,
//     startDate,
//     endDate,
//     onChange,
//     isAdmin,
//   ]);

//   const handleReset = () => {
//     setQuery("");
//     setPriceMin("");
//     setPriceMax("");
//     setMinRating("");
//     setInStock(false);
//     setSortBy("");
//     setSortDesc(false);
//     setSelectedLetter("");
//     setStartDate(null);
//     setEndDate(null);
//     setSelectedBrandId(null);
//   };

//   const handleBrandSelect = (brand: { name: string; id: number } | null) => {
//     if (brand === null) {
//       setSelectedBrandId(null);
//       setQuery("");
//     } else {
//       setSelectedBrandId(brand.id);
//       setQuery(brand.name);
//     }
//   };

//   const minPriceFromApi = 100;
//   const maxPriceFromApi = 10000;

//   return (
//     <div className="w-full max-w-[1680px] flex flex-col gap-4 px-4 mb-4">
//       <div className="flex flex-col gap-4 w-full">
//         {/* –ë—Ä–µ–Ω–¥–∏ */}
//         <div className="pt-4">
//           {isLoading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤...</p>}
//           {isError && <p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—ñ–≤.</p>}
//           {!isLoading && !isError && (
//             <BrandListWithAlphabet
//               brands={brands}
//               selectedLetter={selectedLetter}
//               onLetterSelect={setSelectedLetter}
//               onBrandSelect={handleBrandSelect}
//               selectedBrandId={selectedBrandId}
//             />
//           )}
//         </div>

//         {/* –ü–æ—à—É–∫ */}
//         <input
//           type="text"
//           placeholder="–ü–æ—à—É–∫..."
//           value={query}
//           onChange={(e) => setQuery(e.target.value)}
//           className="px-3 py-2 rounded w-full"
//           style={{ border: "none" }} // –ü—Ä–∏–±—Ä–∞–≤ –±–æ—Ä–¥–µ—Ä
//         />

//         {/* –¶—ñ–Ω–∞ (—Å–ª–∞–π–¥–µ—Ä) */}
//         {/* –¶—ñ–Ω–∞ (—Å–ª–∞–π–¥–µ—Ä) */}
// {/* –¶—ñ–Ω–∞ (—Å–ª–∞–π–¥–µ—Ä) */}
// <div className="w-full">
//   <label className="block mb-2 font-medium">–¶—ñ–Ω–∞, –≥—Ä–Ω</label>
//   <Slider
//     range
//     min={minPriceFromApi}
//     max={maxPriceFromApi}
//     step={10}
//     value={[Number(priceMin) || minPriceFromApi, Number(priceMax) || maxPriceFromApi]}
//     onChange={([min, max]) => {
//       setPriceMin(String(min));
//       setPriceMax(String(max));
//     }}
//   />
//   <div className="flex justify-between mt-1 gap-4">
//     {/* –õ—ñ–≤–∞ —Å—Ç–æ—Ä–æ–Ω–∞ */}
//     <div className="flex flex-col items-center w-1/2">
//       <span className="text-xs font-medium mb-1">–í—ñ–¥</span>
//       <div className="border rounded px-2 py-1 text-center text-sm w-16">
//         {priceMin || minPriceFromApi} –≥—Ä–Ω
//       </div>
//     </div>

//     {/* –ü—Ä–∞–≤–∞ —Å—Ç–æ—Ä–æ–Ω–∞ */}
//     <div className="flex flex-col items-center w-1/2">
//       <span className="text-xs font-medium mb-1">–î–æ</span>
//       <div className="border rounded px-2 py-1 text-center text-sm w-16">
//         {priceMax || maxPriceFromApi} –≥—Ä–Ω
//       </div>
//     </div>
//   </div>
// </div>



//         {/* –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ */}
//         <div className="flex items-center justify-between">
//           <span className="font-medium">–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥</span>
//           <button
//             onClick={() => setShowMinRating((prev) => !prev)}
//             className="text-xl font-bold px-2"
//             aria-label="Toggle MinRating input"
//           >
//             √ó
//           </button>
//         </div>
//         {showMinRating && (
//           <input
//             type="number"
//             placeholder="–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥"
//             value={minRating}
//             onChange={(e) => setMinRating(e.target.value)}
//             className="px-3 py-2 rounded w-full"
//             min={0}
//             max={5}
//             step={0.1}
//             style={{ border: "none" }}
//           />
//         )}

//         {/* –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ */}
//         <div className="flex items-center justify-between">
//           <span className="font-medium">–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>
//           <button
//             onClick={() => setShowInStock((prev) => !prev)}
//             className="text-xl font-bold px-2"
//             aria-label="Toggle InStock input"
//           >
//             √ó
//           </button>
//         </div>
//         {showInStock && (
//           <label className="flex items-center gap-2">
//             <input
//               type="checkbox"
//               checked={inStock}
//               onChange={(e) => setInStock(e.target.checked)}
//             />
//             –¢–∞–∫
//           </label>
//         )}

//         {/* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
//         <div className="flex items-center justify-between">
//           <span className="font-medium">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</span>
//           <button
//             onClick={() => setShowSortBy((prev) => !prev)}
//             className="text-xl font-bold px-2"
//             aria-label="Toggle SortBy select"
//           >
//             √ó
//           </button>
//         </div>
//         {showSortBy && (
//           <select
//             value={sortBy}
//             onChange={(e) => setSortBy(e.target.value)}
//             className="px-3 py-2 rounded w-full"
//             style={{ border: "none" }}
//           >
//             <option value="">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
//             <option value="Price">–¶—ñ–Ω–∞</option>
//             <option value="Rating">–†–µ–π—Ç–∏–Ω–≥</option>
//             <option value="CreatedAt">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</option>
//           </select>
//         )}

//         {/* –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º */}
//         <div className="flex items-center justify-between">
//           <span className="font-medium">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</span>
//           <button
//             onClick={() => setShowSortDesc((prev) => !prev)}
//             className="text-xl font-bold px-2"
//             aria-label="Toggle SortDesc checkbox"
//           >
//             √ó
//           </button>
//         </div>
//         {showSortDesc && (
//           <label className="flex items-center gap-2">
//             <input
//               type="checkbox"
//               checked={sortDesc}
//               onChange={(e) => setSortDesc(e.target.checked)}
//             />
//             –¢–∞–∫
//           </label>
//         )}

//         {/* –î–∞—Ç–∞ –≤—ñ–¥ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞) */}
//         {isAdmin && (
//           <>
//             <div className="flex items-center justify-between mt-4">
//               <span className="font-medium">–î–∞—Ç–∞ –≤—ñ–¥</span>
//               <button
//                 onClick={() => setShowStartDate((prev) => !prev)}
//                 className="text-xl font-bold px-2"
//                 aria-label="Toggle StartDate picker"
//               >
//                 √ó
//               </button>
//             </div>
//             {showStartDate && (
//               <DatePicker
//                 selected={startDate}
//                 onChange={(date) => setStartDate(date)}
//                 dateFormat="dd.MM.yyyy"
//                 className="px-3 py-2 rounded w-full"
//                 placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥"
//                 isClearable
//                 style={{ border: "none" }}
//               />
//             )}

//             {/* –î–∞—Ç–∞ –¥–æ */}
//             <div className="flex items-center justify-between mt-4">
//               <span className="font-medium">–î–∞—Ç–∞ –¥–æ</span>
//               <button
//                 onClick={() => setShowEndDate((prev) => !prev)}
//                 className="text-xl font-bold px-2"
//                 aria-label="Toggle EndDate picker"
//               >
//                 √ó
//               </button>
//             </div>
//             {showEndDate && (
//               <DatePicker
//                 selected={endDate}
//                 onChange={(date) => setEndDate(date)}
//                 dateFormat="dd.MM.yyyy"
//                 className="px-3 py-2 rounded w-full"
//                 placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ"
//                 isClearable
//                 style={{ border: "none" }}
//               />
//             )}
//           </>
//         )}
//       </div>

//       {/* –ö–Ω–æ–ø–∫–∞ –û—á–∏—Å—Ç–∏—Ç–∏ */}
//       <div className="flex flex-col gap-2 w-full mt-4">
//         <button
//           onClick={handleReset}
//           className="bg-red-500 text-white px-4 py-2 rounded w-full"
//         >
//           –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä
//         </button>
//       </div>
//     </div>
//   );
// };

// export default ProductFilter;

// import React, { useState, useEffect } from "react";
// import { Slider } from "antd";
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";
// import { format } from "date-fns";
// import { useGetBrandsQuery } from "../../services/brandApi";
// import BrandListWithAlphabet from "../brand/BrandListWithAlphabet";
//
// export interface ProductFilterData {
//   Query?: string;
//   PriceMin?: number;
//   PriceMax?: number;
//   MinRating?: number;
//   InStock?: boolean;
//   SortBy?: string;
//   SortDesc?: boolean;
//   StartDate?: string; // "dd.MM.yyyy"
//   EndDate?: string;   // "dd.MM.yyyy"
// }
//
// type Props = {
//   onChange: (filters: ProductFilterData) => void;
//   isAdmin: boolean;
// };
//
// const ProductFilter: React.FC<Props> = ({ onChange, isAdmin }) => {
//   const [query, setQuery] = useState("");
//   const [priceMin, setPriceMin] = useState("");
//   const [priceMax, setPriceMax] = useState("");
//   const [minRating, setMinRating] = useState("");
//   const [inStock, setInStock] = useState(false);
//   const [sortBy, setSortBy] = useState("");
//   const [sortDesc, setSortDesc] = useState(false);
//   const [selectedLetter, setSelectedLetter] = useState("");
//   const [selectedBrandId, setSelectedBrandId] = useState<number | null>(null);
//
//   // –î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
//   const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([null, null]);
//   const [startDate, endDate] = dateRange;
//
//   // –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —á–∏ –Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏
//   const [showMinRating, setShowMinRating] = useState(false);
//   const [showInStock, setShowInStock] = useState(false);
//   const [showSortBy, setShowSortBy] = useState(false);
//   const [showSortDesc, setShowSortDesc] = useState(false);
//   const [showDateRange, setShowDateRange] = useState(false);
//
//   const { data: brands = [], isLoading, isError } = useGetBrandsQuery();
//
//   // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
//   useEffect(() => {
//     onChange({
//       Query: query || undefined,
//       PriceMin: priceMin ? Number(priceMin) : undefined,
//       PriceMax: priceMax ? Number(priceMax) : undefined,
//       MinRating: minRating ? Number(minRating) : undefined,
//       InStock: inStock,
//       SortBy: sortBy || undefined,
//       SortDesc: sortDesc || undefined,
//       StartDate: isAdmin && startDate ? format(startDate, "dd.MM.yyyy") : undefined,
//       EndDate: isAdmin && endDate ? format(endDate, "dd.MM.yyyy") : undefined,
//     });
//   }, [
//     query,
//     priceMin,
//     priceMax,
//     minRating,
//     inStock,
//     sortBy,
//     sortDesc,
//     startDate,
//     endDate,
//     onChange,
//     isAdmin,
//   ]);
//
//   const handleReset = () => {
//     setQuery("");
//     setPriceMin("");
//     setPriceMax("");
//     setMinRating("");
//     setInStock(false);
//     setSortBy("");
//     setSortDesc(false);
//     setSelectedLetter("");
//     setDateRange([null, null]);
//     setSelectedBrandId(null);
//   };
//
//   const handleBrandSelect = (brand: { name: string; id: number } | null) => {
//     if (brand === null) {
//       setSelectedBrandId(null);
//       setQuery("");
//     } else {
//       setSelectedBrandId(brand.id);
//       setQuery(brand.name);
//     }
//   };
//
//   const minPriceFromApi = 100;
//   const maxPriceFromApi = 10000;
//
//   return (
//     <div className="w-full max-w-[1680px] flex flex-col gap-4 px-4 mb-4">
//
//       {/* üî§ –ë—Ä–µ–Ω–¥–∏ */}
//       <div className="pt-4">
//         {isLoading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤...</p>}
//         {isError && <p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—ñ–≤.</p>}
//         {!isLoading && !isError && (
//           <BrandListWithAlphabet
//             brands={brands}
//             selectedLetter={selectedLetter}
//             onLetterSelect={setSelectedLetter}
//             onBrandSelect={handleBrandSelect}
//             selectedBrandId={selectedBrandId}
//           />
//         )}
//       </div>
//
//       {/* üîç –ü–æ—à—É–∫
//       <input
//         type="text"
//         placeholder="–ü–æ—à—É–∫..."
//         value={query}
//         onChange={(e) => setQuery(e.target.value)}
//         className="px-3 py-2 rounded w-full"
//         style={{ border: "none" }}
//       /> */}
//
//
//
//       {/* ‚≠ê –ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥ */}
//       <div className="flex items-center justify-between">
//         <span className="form-label">–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥</span>
//         <button onClick={() => setShowMinRating((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
//       </div>
//       {showMinRating && (
//         <input
//           type="number"
//           placeholder="–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥"
//           value={minRating}
//           onChange={(e) => setMinRating(e.target.value)}
//           className="px-3 py-2 rounded w-full"
//           min={0}
//           max={5}
//           step={0.1}
//           style={{ border: "none" }}
//         />
//       )}
//
//       {/* üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ */}
//       <div className="flex items-center justify-between">
//         <span className="form-label">–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>
//         <button onClick={() => setShowInStock((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
//       </div>
//       {showInStock && (
//         <label className="flex items-center gap-2">
//           <input type="checkbox" checked={inStock} onChange={(e) => setInStock(e.target.checked)} />
//           –¢–∞–∫
//         </label>
//       )}
//
//       {/* üß≠ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
//       <div className="flex items-center justify-between">
//         <span className="form-label">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</span>
//         <button onClick={() => setShowSortBy((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
//       </div>
//       {showSortBy && (
//         <select
//           value={sortBy}
//           onChange={(e) => setSortBy(e.target.value)}
//           className="px-3 py-2 rounded w-full"
//           style={{ border: "none" }}
//         >
//           <option value="">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
//           <option value="Price">–¶—ñ–Ω–∞</option>
//           <option value="Rating">–†–µ–π—Ç–∏–Ω–≥</option>
//           <option value="CreatedAt">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</option>
//         </select>
//       )}
//
//       {/* üîΩ –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º */}
//       <div className="flex items-center justify-between">
//         <span className="form-label">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</span>
//         <button onClick={() => setShowSortDesc((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
//       </div>
//       {showSortDesc && (
//         <label className="flex items-center gap-2">
//           <input type="checkbox" checked={sortDesc} onChange={(e) => setSortDesc(e.target.checked)} />
//           –¢–∞–∫
//         </label>
//       )}
//
//       {/* üìÖ –î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç */}
//       {isAdmin && (
//         <div className="flex flex-col gap-2 mt-4">
//           <div className="flex items-center justify-between">
//             <label className="form-label">–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–≤—ñ–¥ / –¥–æ)</label>
//             <button
//               onClick={() => setShowDateRange((prev) => !prev)}
//               className="text-xl font-bold px-2"
//               aria-label="Toggle Date Range"
//             >
//               √ó
//             </button>
//           </div>
//           {showDateRange && (
//             <DatePicker
//               selectsRange
//               startDate={startDate}
//               endDate={endDate}
//               onChange={(update: [Date | null, Date | null]) => setDateRange(update)}
//               isClearable
//               dateFormat="dd.MM.yyyy"
//               placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω"
//               className="px-3 py-2 rounded w-full"
//             />
//           )}
//         </div>
//       )}
//
//        {/* üí∞ –¶—ñ–Ω–∞ */}
//       <div className="w-full">
//         <label className="block mb-2 form-label">–í–∞—Ä—Ç—ñ—Å—Ç—å</label>
//         <Slider
//           range
//           min={minPriceFromApi}
//           max={maxPriceFromApi}
//           step={10}
//           value={[
//             Number(priceMin) || minPriceFromApi,
//             Number(priceMax) || maxPriceFromApi,
//           ]}
//           onChange={([min, max]) => {
//             setPriceMin(String(min));
//             setPriceMax(String(max));
//           }}
//         />
// <div className="flex flex-wrap items-end content-end gap-y-[20px] gap-x-[127px] w-[312px] h-[130px]">
//
// <div className="flex flex-wrap items-end content-end gap-y-[20px] gap-x-[127px] w-[312px] h-[130px]">
//
//   {/* –í—ñ–¥ */}
//   <div className="w-[87px] h-[27px] border rounded px-2 py-0.5 flex items-center justify-center gap-1">
//     <span className="text-[20px]">–í—ñ–¥</span>
//     <span className="text-black font-manrope text-[20px] font-medium">
//       {priceMin || minPriceFromApi}
//     </span>
//   </div>
//
//   {/* –î–æ */}
//   <div className="w-[87px] h-[27px] border rounded px-2 py-0.5 flex items-center justify-center gap-1">
//     <span className="text-[20px]">–î–æ</span>
//     <span className="text-black font-manrope text-[20px] font-medium">
//       {priceMax || maxPriceFromApi}
//     </span>
//   </div>
//
// </div>
// </div>
// </div>
//
//
//       <button
//   onClick={handleReset}
//   className="bg-transparent text-500 text-sm hover:underline"
// >
//   –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä
// </button>
//     </div>
//   );
// };
//
// export default ProductFilter;

import React, { useState, useEffect } from "react";
import { Slider } from "antd";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { format } from "date-fns";
import { useGetBrandsQuery } from "../../services/brandApi";
import BrandListWithAlphabet from "../brand/BrandListWithAlphabet";

export interface ProductFilterData {
  Query?: string;
  PriceMin?: number;
  PriceMax?: number;
  MinRating?: number;
  InStock?: boolean;
  SortBy?: string;
  SortDesc?: boolean;
  StartDate?: string;
  EndDate?: string;
  BrandIds?: number[]; // üî• –î–æ–¥–∞–Ω–æ: –º–∞—Å–∏–≤ ID –±—Ä–µ–Ω–¥—ñ–≤
}

type Props = {
  onChange: (filters: ProductFilterData) => void;
  isAdmin: boolean;
};

const ProductFilter: React.FC<Props> = ({ onChange, isAdmin }) => {
  const [query, setQuery] = useState("");
  const [priceMin, setPriceMin] = useState("");
  const [priceMax, setPriceMax] = useState("");
  const [minRating, setMinRating] = useState("");
  const [inStock, setInStock] = useState(false);
  const [sortBy, setSortBy] = useState("");
  const [sortDesc, setSortDesc] = useState(false);
  const [selectedLetter, setSelectedLetter] = useState("");
  const [selectedBrandIds, setSelectedBrandIds] = useState<number[]>([]); // üî•

  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([null, null]);
  const [startDate, endDate] = dateRange;

  const [showMinRating, setShowMinRating] = useState(false);
  const [showInStock, setShowInStock] = useState(false);
  const [showSortBy, setShowSortBy] = useState(false);
  const [showSortDesc, setShowSortDesc] = useState(false);
  const [showDateRange, setShowDateRange] = useState(false);

  const { data: brands = [], isLoading, isError } = useGetBrandsQuery();

  // üß† –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
  useEffect(() => {

    console.log("‚úÖ –û–±—Ä–∞–Ω—ñ –±—Ä–µ–Ω–¥–∏ (BrandIds):", selectedBrandIds);

    onChange({
      Query: query || undefined,
      PriceMin: priceMin ? Number(priceMin) : undefined,
      PriceMax: priceMax ? Number(priceMax) : undefined,
      MinRating: minRating ? Number(minRating) : undefined,
      InStock: inStock,
      SortBy: sortBy || undefined,
      SortDesc: sortDesc || undefined,
      StartDate: isAdmin && startDate ? format(startDate, "dd.MM.yyyy") : undefined,
      EndDate: isAdmin && endDate ? format(endDate, "dd.MM.yyyy") : undefined,
      BrandIds: selectedBrandIds.length > 0 ? selectedBrandIds : undefined, // üî•
    });
  }, [
    query,
    priceMin,
    priceMax,
    minRating,
    inStock,
    sortBy,
    sortDesc,
    startDate,
    endDate,
    selectedBrandIds,
    onChange,
    isAdmin,
  ]);

  // üîÅ –°–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const handleReset = () => {
    setQuery("");
    setPriceMin("");
    setPriceMax("");
    setMinRating("");
    setInStock(false);
    setSortBy("");
    setSortDesc(false);
    setSelectedLetter("");
    setDateRange([null, null]);
    setSelectedBrandIds([]); // üî• –°–∫–∏–¥–∞–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
  };

  // ‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –±—Ä–µ–Ω–¥—ñ–≤ (–¥–æ–∑–≤–æ–ª—è—î –∫—ñ–ª—å–∫–∞)
  const handleBrandSelect = (selectedBrands: { id: number }[]) => {
    const ids = selectedBrands.map((b) => b.id);
    setSelectedBrandIds(ids);
  };


  // const handleBrandSelect = (brand: { id: number } | null) => {
  //   if (!brand) return;
  //   setSelectedBrandIds((prev) =>
  //       prev.includes(brand.id) ? prev.filter((id) => id !== brand.id) : [...prev, brand.id]
  //   );
  // };

  const minPriceFromApi = 100;
  const maxPriceFromApi = 10000;

  return (
      <div className="w-full max-w-[1680px] flex flex-col gap-4 px-4 mb-4">
        {/* –ë—Ä–µ–Ω–¥–∏ */}
        <div className="pt-4">
          {isLoading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤...</p>}
          {isError && <p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—ñ–≤.</p>}
          {!isLoading && !isError && (
              <BrandListWithAlphabet
                  brands={brands}
                  selectedLetter={selectedLetter}
                  onLetterSelect={setSelectedLetter}
                  // onBrandSelect={handleBrandSelect}
                  // selectedBrandId={null} // ‚ö†Ô∏è –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –º—É–ª—å—Ç–∏–≤–∏–±–æ—Ä—ñ
                  // selectedBrandIds={selectedBrandIds} // üî• –ü–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤
                  onBrandSelect={handleBrandSelect}
                  selectedBrandIds={selectedBrandIds}

              />
          )}
        </div>

        {/* –ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥ */}
        <div className="flex items-center justify-between">
          <span className="form-label">–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥</span>
          <button onClick={() => setShowMinRating((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
        </div>
        {showMinRating && (
            <input
                type="number"
                placeholder="–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥"
                value={minRating}
                onChange={(e) => setMinRating(e.target.value)}
                className="px-3 py-2 rounded w-full"
                min={0}
                max={5}
                step={0.1}
                style={{ border: "none" }}
            />
        )}

        {/* –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ */}
        <div className="flex items-center justify-between">
          <span className="form-label">–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>
          <button onClick={() => setShowInStock((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
        </div>
        {showInStock && (
            <label className="flex items-center gap-2">
              <input type="checkbox" checked={inStock} onChange={(e) => setInStock(e.target.checked)} />
              –¢–∞–∫
            </label>
        )}

        {/* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
        <div className="flex items-center justify-between">
          <span className="form-label">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</span>
          <button onClick={() => setShowSortBy((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
        </div>
        {showSortBy && (
            <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="px-3 py-2 rounded w-full"
                style={{ border: "none" }}
            >
              <option value="">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
              <option value="Price">–¶—ñ–Ω–∞</option>
              <option value="Rating">–†–µ–π—Ç–∏–Ω–≥</option>
              <option value="CreatedAt">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</option>
            </select>
        )}

        {/* –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º */}
        <div className="flex items-center justify-between">
          <span className="form-label">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</span>
          <button onClick={() => setShowSortDesc((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
        </div>
        {showSortDesc && (
            <label className="flex items-center gap-2">
              <input type="checkbox" checked={sortDesc} onChange={(e) => setSortDesc(e.target.checked)} />
              –¢–∞–∫
            </label>
        )}

        {/* –î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç */}
        {isAdmin && (
            <div className="flex flex-col gap-2 mt-4">
              <div className="flex items-center justify-between">
                <label className="form-label">–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–≤—ñ–¥ / –¥–æ)</label>
                <button onClick={() => setShowDateRange((prev) => !prev)} className="text-xl font-bold px-2">√ó</button>
              </div>
              {showDateRange && (
                  <DatePicker
                      selectsRange
                      startDate={startDate}
                      endDate={endDate}
                      onChange={(update: [Date | null, Date | null]) => setDateRange(update)}
                      isClearable
                      dateFormat="dd.MM.yyyy"
                      placeholderText="–û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω"
                      className="px-3 py-2 rounded w-full"
                  />
              )}
            </div>
        )}

        {/* –¶—ñ–Ω–∞ */}
        <div className="w-full">
          <label className="block mb-2 form-label">–í–∞—Ä—Ç—ñ—Å—Ç—å</label>
          <Slider
              range
              min={minPriceFromApi}
              max={maxPriceFromApi}
              step={10}
              value={[
                Number(priceMin) || minPriceFromApi,
                Number(priceMax) || maxPriceFromApi,
              ]}
              onChange={([min, max]) => {
                setPriceMin(String(min));
                setPriceMax(String(max));
              }}
          />
          <div className="flex flex-wrap gap-x-4 mt-2">
            <div className="flex items-center gap-2">
              <span>–í—ñ–¥:</span>
              <span>{priceMin || minPriceFromApi}</span>
            </div>
            <div className="flex items-center gap-2">
              <span>–î–æ:</span>
              <span>{priceMax || maxPriceFromApi}</span>
            </div>
          </div>
        </div>

        {/* üîò –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ */}
        <button onClick={handleReset} className="text-blue-600 hover:underline text-sm self-start mt-4">
          –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä
        </button>
      </div>
  );
};

export default ProductFilter;

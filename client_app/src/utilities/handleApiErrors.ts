// //handleApiErrors.ts

// import { FormInstance, message } from 'antd';

// interface ApiError {
//     data?: {
//         message?: string;
//         errors?: {
//             [key: string]: string[] | string;
//         };
//     };
// }

// export function handleFormErrors(error: ApiError, form: FormInstance) {
//     console.log('üî• handleFormErrors error:', error);

//     if (error?.data?.errors) {
//         const fieldErrors = Object.entries(error.data.errors).map(([field, messages]) => ({
//             name: field.charAt(0).toLowerCase() + field.slice(1), // –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏
//             errors: Array.isArray(messages) ? messages : [messages],
//         }));

//         form.setFields(fieldErrors);
//         return; // —è–∫—â–æ —î field errors, –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é
//     }

//     if (error?.data?.message) {
//         message.error(error.data.message); // –≥–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞

//         let emailError: string[] = [];
//         let phoneError: string[] = [];

//         if (error.data.message.includes('–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é')) {
//             emailError = [error.data.message];
//         } else if (error.data.message.includes('–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É')) {
//             phoneError = [error.data.message];
//         }

//         form.setFields([
//             {
//                 name: 'email',
//                 errors: emailError,
//             },
//             {
//                 name: 'phone',
//                 errors: phoneError,
//             },
//         ]);
//     }
// }

import { FormInstance, message } from 'antd';

interface ApiError {
  data?: {
    message?: string;
    errors?: Record<string, string[] | string>;
  };
  status?: number;
}

// –ú–∞–ø–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–æ –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏
const fieldKeywordMap: Record<string, string> = {
  '–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é': 'email',
  'email': 'email',
  '–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É': 'phone',
  'phone': 'phone',
  '–±—Ä–µ–Ω–¥': 'name',
  'brand': 'name',
  '–Ω–∞–∑–≤–∞': 'name',
};

export function handleFormErrors(error: ApiError, form: FormInstance) {
  console.log('üî• handleFormErrors error:', error);

  // 1. –Ø–∫—â–æ —î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –ø–æ –ø–æ–ª—è—Ö
  if (error?.data?.errors) {
    const fieldErrors = Object.entries(error.data.errors).map(([field, messages]) => ({
      name: field.charAt(0).toLowerCase() + field.slice(1),
      errors: Array.isArray(messages) ? messages : [messages],
    }));

    form.setFields(fieldErrors);
    return;
  }

  // 2. –Ø–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ message ‚Äî –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
  const messageText = error?.data?.message?.toLowerCase() || '';

  for (const keyword in fieldKeywordMap) {
    if (messageText.includes(keyword)) {
      const fieldName = fieldKeywordMap[keyword];
      form.setFields([
        {
          name: fieldName,
          errors: [error.data!.message!],
        },
      ]);
      return; // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫—É –≤–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ
    }
  }

  // 3. –Ü–Ω–∞–∫—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (error?.data?.message) {
    message.error(error.data.message);
  }
}
